// Title: REST API for Playing Card Collection Using Express.js
// Objective: Build a RESTful API using Express.js to manage a collection of playing cards.

// 1. Import Express
// This line imports the express module, which is the framework we'll use to build the server.
const express = require('express');

// 2. Initialize the Express application
// This creates an instance of the Express application.
const app = express();

// 3. Define the port
// The server will listen on this port. The common port for local development is 3000.
const port = 3000;

// 4. Use Middleware
// This line adds the express.json() middleware, which parses incoming requests with JSON payloads.
// It's necessary to read data from the body of POST requests.
app.use(express.json());

// 5. In-memory Data Store
// For simplicity, we'll store our card data in a simple array on the server.
// In a real-world application, this would be a database.
let cards = [
  { id: 1, suit: "Hearts", value: "Ace" },
  { id: 2, suit: "Spades", value: "King" },
  { id: 3, suit: "Diamonds", value: "Queen" }
];

// A variable to track the next available ID for new cards.
let nextId = 4;

// --- API Endpoints (Routes) ---

/**
 * @route   GET /cards
 * @desc    Get all cards in the collection
 * @access  Public
 */
app.get('/cards', (req, res) => {
  // Respond with the entire array of cards and a 200 OK status code.
  res.status(200).json(cards);
});

/**
 * @route   GET /cards/:id
 * @desc    Get a single card by its ID
 * @access  Public
 */
app.get('/cards/:id', (req, res) => {
  // Extract the card ID from the URL parameters and convert it to an integer.
  const cardId = parseInt(req.params.id);
  // Find the card in the array with the matching ID.
  const card = cards.find(c => c.id === cardId);

  if (card) {
    // If the card is found, respond with the card object and a 200 OK status.
    res.status(200).json(card);
  } else {
    // If no card is found, respond with a 404 Not Found status and an error message.
    res.status(404).json({ message: 'Card not found' });
  }
});

/**
 * @route   POST /cards
 * @desc    Add a new card to the collection
 * @access  Public
 */
app.post('/cards', (req, res) => {
  // Destructure the suit and value from the request body.
  const { suit, value } = req.body;

  // Basic validation to ensure suit and value are provided.
  if (!suit || !value) {
    return res.status(400).json({ message: 'Suit and value are required' });
  }

  // Create a new card object with a unique ID.
  const newCard = {
    id: nextId++, // Use the current nextId and then increment it
    suit: suit,
    value: value
  };

  // Add the new card to our in-memory array.
  cards.push(newCard);

  // Respond with the newly created card and a 201 Created status code.
  res.status(201).json(newCard);
});

/**
 * @route   DELETE /cards/:id
 * @desc    Delete a card by its ID
 * @access  Public
 */
app.delete('/cards/:id', (req, res) => {
  // Extract the card ID from the URL and convert it to an integer.
  const cardId = parseInt(req.params.id);
  // Find the index of the card to be deleted.
  const cardIndex = cards.findIndex(c => c.id === cardId);

  if (cardIndex !== -1) {
    // If the card exists, remove it from the array using splice.
    // splice returns an array of removed items; we destructure to get the first (and only) item.
    const [deletedCard] = cards.splice(cardIndex, 1);
    
    // Respond with a success message and the deleted card object.
    res.status(200).json({
      message: `Card with ID ${cardId} removed`,
      card: deletedCard
    });
  } else {
    // If the card doesn't exist, respond with a 404 Not Found status.
    res.status(404).json({ message: 'Card not found' });
  }
});

// 6. Start the Server
// This command starts the server and makes it listen for incoming requests on the specified port.
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
